!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
HLIML_HEAD	list.h	335;"	d
HLIML_HEAD_INIT	list.h	334;"	d
HPATH	Makefile	/^HPATH = -I.\/$/;"	m
INIT_HLIML_HEAD	list.h	336;"	d
INIT_HLIML_NODE	list.h	337;"	d
INIT_LIML_HEAD	list.h	35;"	d
LIML_HEAD	list.h	32;"	d
LIML_HEAD_INIT	list.h	30;"	d
LIML_POISON	list.h	13;"	d
LIML_POISON1	list.h	11;"	d
LIML_POISON2	list.h	12;"	d
LINUX_LIML_H	list.h	2;"	d
MAX_COUNT	ml_timer.c	42;"	d	file:
MLCLHData	ml_create.c	/^}MLCLHData,*PMLCLHData;$/;"	t	typeref:struct:_MLCLHData	file:
MLCLHandle	ml_create.h	/^typedef void * MLCLHandle;$/;"	t
MLCLParam	ml_create.h	/^}MLCLParam, *PMLCLParam;$/;"	t	typeref:struct:_MLCLParam
MLCheckHead	ml_recv_check.c	/^}MLCheckHead, *PMLCheckHead;$/;"	t	typeref:struct:_MLCheckHead	file:
MLCheckNode	ml_recv_check.c	/^}MLCheckNode, *PMLCheckNode;$/;"	t	typeref:struct:_PCCheckNode	file:
MLClientData	ml_client_data.c	/^}MLClientData, *PMLClientData;$/;"	t	typeref:struct:_MLClientData	file:
MLCommConfFunc	ml_handle_opt.c	/^	int (*MLCommConfFunc)(char *sName, MLCommConfig *pStruConf, int iValLen, char *sVal);$/;"	m	struct:_MLOptManage	file:
MLCommConfig	ml_comm_config.h	/^typedef struct _MLOptConfig MLCommConfig,*PMLCommConfig;$/;"	t	typeref:struct:_MLOptConfig
MLCommNode	ml_comm.h	/^}MLCommNode, *PMLCommNode;$/;"	t	typeref:struct:_MLCommNode
MLCreateLink	ml_create.c	/^}MLCreateLink, *PMLCreateLink;$/;"	t	typeref:struct:_MLCreateLink	file:
MLCreateLinkData	ml_create.c	/^}MLCreateLinkData, *PMLCreateLinkData;$/;"	t	typeref:struct:_MLCreateLinkData	file:
MLCreateLinkFunc	ml_create.h	/^typedef int (*MLCreateLinkFunc)(int iLinkID, struct in_addr struAddr, unsigned short usPort, void *pUserData);$/;"	t
MLDataArray	ml_client_data.c	/^}MLDataArray, *PMLDataArray;$/;"	t	typeref:struct:_MLDataArray	file:
MLDataHandle	ml_client_data.h	/^typedef void * MLDataHandle;$/;"	t
MLDispose	ml_dispose.c	/^}MLDispose, *PMLDispose;$/;"	t	typeref:struct:_MLDispose	file:
MLDisposeFunc	ml_dispose.h	/^typedef void (*MLDisposeFunc)(int iRecvLen, char *sRecvData, void *pUserData);$/;"	t
MLDisposeHandle	ml_dispose.h	/^typedef void * MLDisposeHandle;$/;"	t
MLEpollErrFunc	ml_listen.h	/^typedef void (*MLEpollErrFunc)(void *pEpollData);$/;"	t
MLEpollHupFunc	ml_listen.h	/^typedef void (*MLEpollHupFunc)(void *pEpollData);$/;"	t
MLEpollOutFunc	ml_listen.h	/^typedef void (*MLEpollOutFunc)(void *pEpollData);$/;"	t
MLEpollPriFunc	ml_listen.h	/^typedef void (*MLEpollPriFunc)(void *pEpollData);$/;"	t
MLEpollRDHupFunc	ml_listen.h	/^typedef void (*MLEpollRDHupFunc)(void *pEpollData);$/;"	t
MLEpollinFunc	ml_listen.h	/^typedef void (*MLEpollinFunc)(void *pEpollData);$/;"	t
MLExit	ml_exit.c	/^}MLExit, *PMLExit;$/;"	t	typeref:struct:_MLExit	file:
MLExitHandle	ml_exit.h	/^typedef void* MLExitHandle;$/;"	t
MLHandle	ml_manage.h	/^typedef void * MLHandle;$/;"	t
MLHub	ml_hub.c	/^}MLHub, *PMLHub;$/;"	t	typeref:struct:_MLHub	file:
MLHubFunc	ml_hub.h	/^typedef void (*MLHubFunc)(unsigned long ulData);$/;"	t
MLHubHandle	ml_hub.h	/^typedef void * MLHubHandle;$/;"	t
MLHubHandleFunc	ml_hub.h	/^typedef void (*MLHubHandleFunc)(unsigned long ulData);$/;"	t
MLHubListData	ml_hub.c	/^}MLHubListData, *PMLHubListData;$/;"	t	typeref:struct:_MLHubListData	file:
MLHubTable	ml_hub.c	/^typedef struct MLHubTable$/;"	s	file:
MLHubTable	ml_hub.c	/^}MLHubTable, *PMLHubTable;$/;"	t	typeref:struct:MLHubTable	file:
MLListenHandle	ml_listen.h	/^typedef void * MLListenHandle;$/;"	t
MLListenOp	ml_listen.h	/^}MLListenOp, *PMLListenOp;$/;"	t	typeref:struct:_MLListenerOp
MLListener	ml_listen.c	/^}MLListener, *PMLListener;$/;"	t	typeref:struct:_MLListener	file:
MLOptHandle	ml_handle_opt.h	/^typedef void * MLOptHandle;$/;"	t
MLOptManage	ml_handle_opt.c	/^}MLOptManage, *PMLOptManage;$/;"	t	typeref:struct:_MLOptManage	file:
MLRCHandle	ml_read_config.h	/^typedef void * MLRCHandle;$/;"	t
MLRCManage	ml_read_config.c	/^}MLRCManage, *PMLRCManage;$/;"	t	typeref:struct:_MLRCManage	file:
MLRecv	ml_recv.c	/^typedef struct MLRecv$/;"	s	file:
MLRecv	ml_recv.c	/^}MLRecv, *PMLRecv;$/;"	t	typeref:struct:MLRecv	file:
MLRecvCheck	ml_recv_check.c	/^typedef struct _MLRecvCheck MLRecvCheck,*PMLRecvCheck;$/;"	t	typeref:struct:_MLRecvCheck	file:
MLRecvCheckFailFunc	ml_recv_check.h	/^typedef void (*MLRecvCheckFailFunc)(void *pUserData);$/;"	t
MLRecvCheckHandle	ml_recv_check.h	/^typedef void * MLRecvCheckHandle;$/;"	t
MLRecvFunc	ml_recv.h	/^typedef int (*MLRecvFunc)(void *pEventData, int *piRecvLen, char **ssRecvData);$/;"	t
MLRecvHandle	ml_recv.h	/^typedef void * MLRecvHandle;$/;"	t
MLResult	ml_result.c	/^}MLResult, *PMLResult;$/;"	t	typeref:struct:_MLResult	file:
MLResultFunc	ml_result.h	/^typedef void (*MLResultFunc)(FILE *fp, void *pUserData);$/;"	t
MLResultHandle	ml_result.h	/^typedef void * MLResultHandle;$/;"	t
MLSend	ml_send.c	/^}MLSend, *PMLSend;$/;"	t	typeref:struct:_MLSend	file:
MLSendFunc	ml_send.h	/^typedef void (*MLSendFunc)(void *pUserData);$/;"	t
MLSendHandle	ml_send.h	/^typedef void * MLSendHandle;$/;"	t
MLThreadGroup	ml_thread.c	/^}MLThreadGroup, *PMLThreadGroup;$/;"	t	typeref:struct:_MLThreadGroup	file:
MLThreadHandle	ml_thread.h	/^typedef void * MLThreadHandle;$/;"	t
MLThreadMember	ml_thread.c	/^}MLThreadMember, *PMLThreadMemeber;$/;"	t	typeref:struct:_MLThreadMember	file:
MLThreadTable	ml_thread.c	/^}MLThreadTable, *PMLThreadTable;$/;"	t	typeref:struct:_MLThreadTable	file:
MLTimer	ml_timer.c	/^}MLTimer, *PMLTimer;$/;"	t	typeref:struct:_MLTimer	file:
MLTimerHandle	ml_timer.h	/^typedef void * MLTimerHandle;$/;"	t
MLTimerHead	ml_timer.c	/^}MLTimerHead, *PMLTimerHead;$/;"	t	typeref:struct:_MLTimerHead	file:
ML_ALLOC_CONFIG	ml_comm_config.h	21;"	d
ML_BZERO	ml_comm.h	44;"	d
ML_CALLOC	ml_comm.h	34;"	d
ML_CANNOT_CONNECT	ml_error.h	/^	ML_CANNOT_CONNECT,$/;"	e	enum:__anon1
ML_CHECK_SIZE	ml_recv_check.h	4;"	d
ML_CHECK_TICK_MLART	ml_recv_check.h	5;"	d
ML_CHECK_TICK_MLOP	ml_recv_check.h	6;"	d
ML_CMP_DATA	ml_comm.h	58;"	d
ML_COMM_CONFIG_H	ml_comm_config.h	2;"	d
ML_COMM_H	ml_comm.h	2;"	d
ML_CREATE_H	ml_create.h	2;"	d
ML_CT_CONFIG	ml_comm_config.h	/^	ML_CT_CONFIG,$/;"	e	enum:__anon2
ML_CT_MAX	ml_comm_config.h	/^	ML_CT_MAX$/;"	e	enum:__anon2
ML_CT_OPT	ml_comm_config.h	/^	ML_CT_OPT,$/;"	e	enum:__anon2
ML_DEBUG	ml_comm.h	30;"	d
ML_DEFAULT_CHECK_SIZE	ml_comm.h	25;"	d
ML_DEFAULT_DURATION_TIME	ml_comm.h	26;"	d
ML_DEFAULT_GROUP_NUM	ml_comm.h	24;"	d
ML_DEFAULT_HUB_TABLE_SIZE	ml_comm.h	20;"	d
ML_DEFAULT_THREAD_MLACK_SIZE	ml_comm.h	21;"	d
ML_DEFAULT_THREAD_NUM	ml_comm.h	22;"	d
ML_DEFAULT_TIMER_NUM	ml_comm.h	23;"	d
ML_DEMLROY_COMM_CONFIG	ml_comm_config.h	45;"	d
ML_DISPOSE_NOT_INIT	ml_error.h	/^	ML_DISPOSE_NOT_INIT,$/;"	e	enum:__anon1
ML_ERR	ml_error.h	/^	ML_ERR,$/;"	e	enum:__anon1
ML_ERROR	ml_comm.h	29;"	d
ML_ERROR_H	ml_error.h	2;"	d
ML_EXIT_H	ml_exit.h	2;"	d
ML_EXIT_NOT_INIT	ml_error.h	/^	ML_EXIT_NOT_INIT,$/;"	e	enum:__anon1
ML_FILE_NAME_TOO_LONG	ml_error.h	/^	ML_FILE_NAME_TOO_LONG,$/;"	e	enum:__anon1
ML_FREE	ml_comm.h	49;"	d
ML_GET_VAL	ml_comm_config.h	57;"	d
ML_HANDLE_H	ml_dispose.h	2;"	d
ML_HANDLE_OPT_H	ml_handle_opt.h	2;"	d
ML_HUB_H	ml_hub.h	2;"	d
ML_HUB_MLATUS_IDLE	ml_hub.c	7;"	d	file:
ML_HUB_MLATUS_RUNNING	ml_hub.c	8;"	d	file:
ML_LIMLEN_H	ml_listen.h	2;"	d
ML_LISTEN	ml_error.h	/^	ML_LISTEN,$/;"	e	enum:__anon1
ML_MANAGE_CONFIG_H	ml_manage_config.h	2;"	d
ML_MANAGE_CREATE_H	ml_manage_create.h	2;"	d
ML_MANAGE_DISPOSE_H	ml_manage_dispose.h	2;"	d
ML_MANAGE_H	ml_manage.h	2;"	d
ML_MANAGE_HUB_H	ml_manage_hub.h	2;"	d
ML_MANAGE_LIMLEN_H	ml_manage_listen.h	2;"	d
ML_MANAGE_RECV_CHECK_H	ml_manage_recv_check.h	2;"	d
ML_MANAGE_RECV_H	ml_manage_recv.h	2;"	d
ML_MAX	ml_error.h	/^	ML_MAX$/;"	e	enum:__anon1
ML_MAX_EVENT	ml_listen.h	24;"	d
ML_OK	ml_error.h	/^	ML_OK,$/;"	e	enum:__anon1
ML_PARAM_ERR	ml_error.h	/^	ML_PARAM_ERR,$/;"	e	enum:__anon1
ML_RC_CHAR	ml_read_config.h	/^	ML_RC_CHAR,$/;"	e	enum:__anon3
ML_RC_FUNC	ml_read_config.h	/^	ML_RC_FUNC,$/;"	e	enum:__anon3
ML_RC_INT	ml_read_config.h	/^	ML_RC_INT,$/;"	e	enum:__anon3
ML_RC_IPADDR	ml_read_config.h	/^	ML_RC_IPADDR,$/;"	e	enum:__anon3
ML_RC_MAX	ml_read_config.h	/^	ML_RC_MAX$/;"	e	enum:__anon3
ML_RC_MLRING	ml_read_config.h	/^	ML_RC_MLRING,$/;"	e	enum:__anon3
ML_RC_SHORT	ml_read_config.h	/^	ML_RC_SHORT,$/;"	e	enum:__anon3
ML_RC_UCHAR	ml_read_config.h	/^	ML_RC_UCHAR,$/;"	e	enum:__anon3
ML_RC_UINT	ml_read_config.h	/^	ML_RC_UINT,$/;"	e	enum:__anon3
ML_RC_USHORT	ml_read_config.h	/^	ML_RC_USHORT,$/;"	e	enum:__anon3
ML_READ_CONFIG_H	ml_read_config.h	2;"	d
ML_RECV_CHECK_H	ml_recv_check.h	2;"	d
ML_RECV_CHECK_NOT_INIT	ml_error.h	/^	ML_RECV_CHECK_NOT_INIT,$/;"	e	enum:__anon1
ML_RECV_H	ml_recv.h	2;"	d
ML_RECV_NOT_INIT	ml_error.h	/^	ML_RECV_NOT_INIT,$/;"	e	enum:__anon1
ML_RESULT_H	ml_result.h	2;"	d
ML_SEND_H	ml_send.h	2;"	d
ML_SEND_NOT_INIT	ml_error.h	/^	ML_SEND_NOT_INIT,$/;"	e	enum:__anon1
ML_SET_CONFIG	ml_comm_config.h	27;"	d
ML_SET_CONFIG_WITH_NEXT	ml_comm_config.h	39;"	d
ML_SPACE_FULL	ml_error.h	/^	ML_SPACE_FULL,$/;"	e	enum:__anon1
ML_TABLE_SIZE	ml_hub.c	5;"	d	file:
ML_THREAD_GROUP	ml_thread.h	8;"	d
ML_THREAD_LIML_LEN	ml_thread.h	10;"	d
ML_THREAD_MEMBER	ml_thread.h	9;"	d
ML_THREAD_NOT_INIT	ml_error.h	/^	ML_THREAD_NOT_INIT,$/;"	e	enum:__anon1
ML_THREAD_POOL_H	ml_thread.h	2;"	d
ML_TIMEOUT	ml_error.h	/^	ML_TIMEOUT,$/;"	e	enum:__anon1
ML_TIMER_H	ml_timer.h	2;"	d
ML_TIMER_IDLE	ml_timer.c	/^	ML_TIMER_IDLE,$/;"	e	enum:__anon5	file:
ML_TIMER_MAX	ml_timer.c	/^	ML_TIMER_MAX$/;"	e	enum:__anon5	file:
ML_TIMER_MLATUS_CONMLANT	ml_timer.h	/^	ML_TIMER_MLATUS_CONMLANT,			\/\/永久存在$/;"	e	enum:__anon4
ML_TIMER_MLATUS_INMLANT	ml_timer.h	/^	ML_TIMER_MLATUS_INMLANT,				\/\/执行一次就消除$/;"	e	enum:__anon4
ML_TIMER_MLATUS_MAX	ml_timer.h	/^	ML_TIMER_MLATUS_MAX$/;"	e	enum:__anon4
ML_TIMER_NOT_INIT	ml_error.h	/^	ML_TIMER_NOT_INIT,$/;"	e	enum:__anon1
ML_TIMER_READY	ml_timer.c	/^	ML_TIMER_READY,$/;"	e	enum:__anon5	file:
ML_TIMER_RUNNING	ml_timer.c	/^	ML_TIMER_RUNNING,$/;"	e	enum:__anon5	file:
M_CLIENT_DATA_H	ml_client_data.h	2;"	d
OBJS	Makefile	/^OBJS = $(SRCS:%.c=%.o)$/;"	m
PCLinkHandleData	ml_create.c	/^}PCLinkHandleData, *PPCLinkHandleData;$/;"	t	typeref:struct:_PCLinkHandleData	file:
PMLCLHData	ml_create.c	/^}MLCLHData,*PMLCLHData;$/;"	t	typeref:struct:_MLCLHData	file:
PMLCLParam	ml_create.h	/^}MLCLParam, *PMLCLParam;$/;"	t	typeref:struct:_MLCLParam
PMLCheckHead	ml_recv_check.c	/^}MLCheckHead, *PMLCheckHead;$/;"	t	typeref:struct:_MLCheckHead	file:
PMLCheckNode	ml_recv_check.c	/^}MLCheckNode, *PMLCheckNode;$/;"	t	typeref:struct:_PCCheckNode	file:
PMLClientData	ml_client_data.c	/^}MLClientData, *PMLClientData;$/;"	t	typeref:struct:_MLClientData	file:
PMLCommConfig	ml_comm_config.h	/^typedef struct _MLOptConfig MLCommConfig,*PMLCommConfig;$/;"	t	typeref:struct:
PMLCommNode	ml_comm.h	/^}MLCommNode, *PMLCommNode;$/;"	t	typeref:struct:_MLCommNode
PMLCreateLink	ml_create.c	/^}MLCreateLink, *PMLCreateLink;$/;"	t	typeref:struct:_MLCreateLink	file:
PMLCreateLinkData	ml_create.c	/^}MLCreateLinkData, *PMLCreateLinkData;$/;"	t	typeref:struct:_MLCreateLinkData	file:
PMLDataArray	ml_client_data.c	/^}MLDataArray, *PMLDataArray;$/;"	t	typeref:struct:_MLDataArray	file:
PMLDispose	ml_dispose.c	/^}MLDispose, *PMLDispose;$/;"	t	typeref:struct:_MLDispose	file:
PMLExit	ml_exit.c	/^}MLExit, *PMLExit;$/;"	t	typeref:struct:_MLExit	file:
PMLHub	ml_hub.c	/^}MLHub, *PMLHub;$/;"	t	typeref:struct:_MLHub	file:
PMLHubListData	ml_hub.c	/^}MLHubListData, *PMLHubListData;$/;"	t	typeref:struct:_MLHubListData	file:
PMLHubTable	ml_hub.c	/^}MLHubTable, *PMLHubTable;$/;"	t	typeref:struct:MLHubTable	file:
PMLListenOp	ml_listen.h	/^}MLListenOp, *PMLListenOp;$/;"	t	typeref:struct:_MLListenerOp
PMLListener	ml_listen.c	/^}MLListener, *PMLListener;$/;"	t	typeref:struct:_MLListener	file:
PMLOptManage	ml_handle_opt.c	/^}MLOptManage, *PMLOptManage;$/;"	t	typeref:struct:_MLOptManage	file:
PMLRCManage	ml_read_config.c	/^}MLRCManage, *PMLRCManage;$/;"	t	typeref:struct:_MLRCManage	file:
PMLRecv	ml_recv.c	/^}MLRecv, *PMLRecv;$/;"	t	typeref:struct:MLRecv	file:
PMLRecvCheck	ml_recv_check.c	/^typedef struct _MLRecvCheck MLRecvCheck,*PMLRecvCheck;$/;"	t	typeref:struct:	file:
PMLResult	ml_result.c	/^}MLResult, *PMLResult;$/;"	t	typeref:struct:_MLResult	file:
PMLSend	ml_send.c	/^}MLSend, *PMLSend;$/;"	t	typeref:struct:_MLSend	file:
PMLThreadGroup	ml_thread.c	/^}MLThreadGroup, *PMLThreadGroup;$/;"	t	typeref:struct:_MLThreadGroup	file:
PMLThreadMemeber	ml_thread.c	/^}MLThreadMember, *PMLThreadMemeber;$/;"	t	typeref:struct:_MLThreadMember	file:
PMLThreadTable	ml_thread.c	/^}MLThreadTable, *PMLThreadTable;$/;"	t	typeref:struct:_MLThreadTable	file:
PMLTimer	ml_timer.c	/^}MLTimer, *PMLTimer;$/;"	t	typeref:struct:_MLTimer	file:
PMLTimerHead	ml_timer.c	/^}MLTimerHead, *PMLTimerHead;$/;"	t	typeref:struct:_MLTimerHead	file:
PPCLinkHandleData	ml_create.c	/^}PCLinkHandleData, *PPCLinkHandleData;$/;"	t	typeref:struct:_PCLinkHandleData	file:
PServerTest	ml_manage.h	/^}ServerTest, *PServerTest;$/;"	t	typeref:struct:_ServerTest
RM	Makefile	/^RM = rm -rf$/;"	m
SERVER_THREAD_TABLE_SIZE	ml_manage.h	21;"	d
SRCPATH	Makefile	/^SRCPATH = .\/$/;"	m
SRCS	Makefile	/^SRCS = $(wildcard $(SRCPATH)\/*.c)$/;"	m
ServerTest	ml_manage.h	/^}ServerTest, *PServerTest;$/;"	t	typeref:struct:_ServerTest
TARGET	Makefile	/^TARGET = ..\/libml.a$/;"	m
_MLCLHData	ml_create.c	/^typedef struct _MLCLHData$/;"	s	file:
_MLCLParam	ml_create.h	/^typedef struct _MLCLParam$/;"	s
_MLCheckHead	ml_recv_check.c	/^typedef struct _MLCheckHead$/;"	s	file:
_MLClientData	ml_client_data.c	/^typedef struct _MLClientData$/;"	s	file:
_MLCommNode	ml_comm.h	/^typedef struct _MLCommNode$/;"	s
_MLCreateLink	ml_create.c	/^typedef struct _MLCreateLink$/;"	s	file:
_MLCreateLinkData	ml_create.c	/^typedef struct _MLCreateLinkData$/;"	s	file:
_MLDataArray	ml_client_data.c	/^typedef struct _MLDataArray$/;"	s	file:
_MLDispose	ml_dispose.c	/^typedef struct _MLDispose$/;"	s	file:
_MLExit	ml_exit.c	/^typedef struct _MLExit$/;"	s	file:
_MLHub	ml_hub.c	/^typedef struct _MLHub$/;"	s	file:
_MLHubListData	ml_hub.c	/^typedef struct _MLHubListData$/;"	s	file:
_MLListener	ml_listen.c	/^typedef struct _MLListener$/;"	s	file:
_MLListenerOp	ml_listen.h	/^typedef struct _MLListenerOp$/;"	s
_MLOptConfig	ml_comm_config.h	/^struct _MLOptConfig$/;"	s
_MLOptManage	ml_handle_opt.c	/^typedef struct _MLOptManage$/;"	s	file:
_MLRCManage	ml_read_config.c	/^typedef struct _MLRCManage$/;"	s	file:
_MLRecvCheck	ml_recv_check.c	/^struct _MLRecvCheck$/;"	s	file:
_MLResult	ml_result.c	/^typedef struct _MLResult$/;"	s	file:
_MLSend	ml_send.c	/^typedef struct _MLSend$/;"	s	file:
_MLThreadGroup	ml_thread.c	/^typedef struct _MLThreadGroup$/;"	s	file:
_MLThreadMember	ml_thread.c	/^typedef struct _MLThreadMember$/;"	s	file:
_MLThreadTable	ml_thread.c	/^typedef struct _MLThreadTable$/;"	s	file:
_MLTimer	ml_timer.c	/^typedef struct _MLTimer$/;"	s	file:
_MLTimerHead	ml_timer.c	/^typedef struct _MLTimerHead$/;"	s	file:
_PCCheckNode	ml_recv_check.c	/^typedef struct _PCCheckNode$/;"	s	file:
_PCLinkHandleData	ml_create.c	/^typedef struct _PCLinkHandleData$/;"	s	file:
_ServerTest	ml_manage.h	/^typedef struct _ServerTest{ $/;"	s
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	list.h	240;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
__ml_del_timer	ml_timer.c	/^__ml_del_timer($/;"	f	file:
execute_func	ml_thread.c	/^	int  (*execute_func)(struct list_head *pStruNode );	\/\/线程组执行函数$/;"	m	struct:_MLThreadGroup	file:
first	list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
free	ml_timer.c	/^	void (*free)(unsigned long);$/;"	m	struct:_MLTimerHead	file:
func	ml_timer.c	/^	int (*func)(unsigned long);$/;"	m	struct:_MLTimerHead	file:
group_free	ml_thread.c	/^	void (*group_free)(struct list_head *pStruNode);		\/\/节点释放函数$/;"	m	struct:_MLThreadGroup	file:
group_func	ml_thread.c	/^	int  (*group_func)(struct list_head *pStruNode);		\/\/在分派任务到成员线程之前做的事情$/;"	m	struct:_MLThreadGroup	file:
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	405;"	d
hlist_for_each	list.h	407;"	d
hlist_for_each_entry	list.h	422;"	d
hlist_for_each_entry_continue	list.h	434;"	d
hlist_for_each_entry_from	list.h	446;"	d
hlist_for_each_entry_safe	list.h	459;"	d
hlist_for_each_safe	list.h	411;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
iArgc	ml_handle_opt.c	/^	int iArgc;$/;"	m	struct:_MLOptManage	file:
iCHThreadID	ml_create.c	/^	int iCHThreadID;$/;"	m	struct:_MLCreateLink	file:
iCLID	ml_create.c	/^	int						 iCLID;$/;"	m	struct:_MLCLHData	file:
iCLThreadID	ml_create.c	/^	int iCLThreadID;$/;"	m	struct:_MLCreateLink	file:
iCheckListNum	ml_recv_check.c	/^	int	iCheckListNum;$/;"	m	struct:_MLRecvCheck	file:
iCheckStop	ml_recv_check.c	/^	int    iCheckStop;$/;"	m	struct:_PCCheckNode	file:
iCnt	ml_client_data.c	/^	int iCnt;$/;"	m	struct:_MLDataArray	file:
iCount	ml_thread.c	/^	int							iCount;					  \/\/已经链接个数, 最大个数为ML_THREAD_LIML_LEN$/;"	m	struct:_MLThreadMember	file:
iCount	ml_thread.c	/^	int iCount;																					\/\/线程组成员个数$/;"	m	struct:_MLThreadGroup	file:
iCreateLink	ml_create.h	/^	int iCreateLink;   $/;"	m	struct:_MLCLParam
iCreateLinkTime	ml_create.h	/^	int iCreateLinkTime;	\/\/The iCreateLinkTime and iCreateLink mean that creating iCreateLink tcp-link$/;"	m	struct:_MLCLParam
iDurationTime	ml_exit.c	/^	int iDurationTime;$/;"	m	struct:_MLExit	file:
iEpollFd	ml_listen.c	/^	int iEpollFd;$/;"	m	struct:_MLListener	file:
iExit	ml_exit.c	/^	int iExit;$/;"	m	struct:_MLExit	file:
iExpireTime	ml_hub.c	/^	int   iExpireTime;$/;"	m	struct:_MLHubListData	file:
iExpireTime	ml_hub.c	/^	int iExpireTime;$/;"	m	struct:MLHubTable	file:
iFailCnt	ml_result.c	/^	int  iFailCnt;$/;"	m	struct:_MLResult	file:
iIpCount	ml_create.h	/^	int iIpCount;			 		\/\/The total number of thread$/;"	m	struct:_MLCLParam
iListTableNum	ml_hub.c	/^	int iListTableNum;$/;"	m	struct:_MLHub	file:
iListenNum	ml_listen.c	/^	int iListenNum;$/;"	m	struct:_MLListener	file:
iMSecond	ml_timer.c	/^	int iMSecond;$/;"	m	struct:_MLTimerHead	file:
iMinInterval	ml_hub.c	/^	int iMinInterval;$/;"	m	struct:_MLHub	file:
iNodeCnt	ml_recv_check.c	/^	int iNodeCnt;$/;"	m	struct:_MLRecvCheck	file:
iNum	ml_client_data.c	/^	int iNum;$/;"	m	struct:_MLDataArray	file:
iNum	ml_timer.c	/^	int iNum;						\/\/用于记录有多少用户子使用该定时器$/;"	m	struct:_MLTimerHead	file:
iPassCnt	ml_result.c	/^	int  iPassCnt;$/;"	m	struct:_MLResult	file:
iPortMapCnt	ml_create.h	/^	int iPortMapCnt;			\/\/This element means how many ports between the last two links$/;"	m	struct:_MLCLParam
iRCCount	ml_recv_check.c	/^	int iRCCount;$/;"	m	struct:_MLRecvCheck	file:
iRID	ml_create.c	/^	int iRID;$/;"	m	struct:_PCLinkHandleData	file:
iRecvLen	ml_comm.h	/^	int						iRecvLen;$/;"	m	struct:_MLCommNode
iRecvTimeout	ml_recv_check.c	/^	int iRecvTimeout;$/;"	m	struct:_MLRecvCheck	file:
iSaveTime	ml_recv_check.c	/^	int iSaveTime;$/;"	m	struct:_MLRecvCheck	file:
iSendTimes	ml_hub.c	/^	int iSendTimes;$/;"	m	struct:MLHubTable	file:
iStackSize	ml_create.h	/^	int iStackSize;    		\/\/The size of every stack$/;"	m	struct:_MLCLParam
iStatus	ml_hub.c	/^	int iStatus;$/;"	m	struct:MLHubTable	file:
iThreadCnt	ml_thread.c	/^	int iThreadCnt;$/;"	m	struct:_MLThreadTable	file:
iThreadGroupNum	ml_thread.c	/^	int iThreadGroupNum;$/;"	m	struct:_MLThreadTable	file:
iThreadID	ml_dispose.c	/^	int iThreadID;	$/;"	m	struct:_MLDispose	file:
iThreadID	ml_hub.c	/^	int iThreadID;$/;"	m	struct:_MLHub	file:
iThreadID	ml_recv.c	/^	int iThreadID;$/;"	m	struct:MLRecv	file:
iThreadID	ml_send.c	/^	int iThreadID;	$/;"	m	struct:_MLSend	file:
iThreadNum	ml_create.h	/^	int iThreadNum;				\/\/The num of creating thread$/;"	m	struct:_MLCLParam
iTick	ml_timer.c	/^	int iTick;$/;"	m	struct:_MLTimerHead	file:
iTimerArrayNum	ml_timer.c	/^	int					iTimerArrayNum;$/;"	m	struct:_MLTimer	file:
iTimerCnt	ml_timer.c	/^	int					iTimerCnt;$/;"	m	struct:_MLTimer	file:
iTimerCountThreadID	ml_timer.c	/^	int					iTimerCountThreadID;$/;"	m	struct:_MLTimer	file:
iTimerFlag	ml_timer.c	/^	int iTimerFlag;   \/\/定时器状态,是持续存在还是,只是一致存在$/;"	m	struct:_MLTimerHead	file:
iTimerID	ml_hub.c	/^	int iTimerID;$/;"	m	struct:_MLHub	file:
iTimerStatus	ml_timer.c	/^	int iTimerStatus; \/\/是否正在进行处理$/;"	m	struct:_MLTimerHead	file:
iTimerThreadID	ml_timer.c	/^	int					iTimerThreadID;$/;"	m	struct:_MLTimer	file:
iTimerTick	ml_timer.c	/^	int					iTimerTick;$/;"	m	struct:_MLTimer	file:
iTotalCnt	ml_recv_check.c	/^	int iTotalCnt;$/;"	m	struct:_MLRecvCheck	file:
iTotalCnt	ml_result.c	/^	int  iTotalCnt;$/;"	m	struct:_MLResult	file:
iTotalLink	ml_create.h	/^	int iTotalLink;				\/\/The total num of links that need to create$/;"	m	struct:_MLCLParam
iTotalLink	ml_recv_check.c	/^	int iTotalLink;$/;"	m	struct:_MLRecvCheck	file:
iWaitTime	ml_listen.c	/^	int iWaitTime;$/;"	m	struct:_MLListener	file:
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	217;"	d
list_for_each	list.h	226;"	d
list_for_each_entry	list.h	268;"	d
list_for_each_entry_continue	list.h	301;"	d
list_for_each_entry_reverse	list.h	279;"	d
list_for_each_entry_safe	list.h	313;"	d
list_for_each_prev	list.h	248;"	d
list_for_each_safe	list.h	258;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	291;"	d
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
ml_add_client_data	ml_client_data.c	/^ml_add_client_data($/;"	f
ml_add_create_link_node	ml_create.c	/^ml_add_create_link_node($/;"	f	file:
ml_add_dispose_node	ml_dispose.c	/^ml_add_dispose_node($/;"	f
ml_add_hub	ml_hub.c	/^ml_add_hub($/;"	f
ml_add_hub_node	ml_hub.c	/^ml_add_hub_node($/;"	f	file:
ml_add_listen_sockfd	ml_listen.c	/^ml_add_listen_sockfd($/;"	f
ml_add_recv_check	ml_recv_check.c	/^ml_add_recv_check($/;"	f
ml_add_recv_node	ml_recv.c	/^ml_add_recv_node($/;"	f
ml_add_send_hub	ml_hub.c	/^ml_add_send_hub($/;"	f	file:
ml_add_send_node	ml_send.c	/^ml_add_send_node($/;"	f
ml_add_table_thread_pool_node	ml_thread.c	/^ml_add_table_thread_pool_node($/;"	f
ml_add_thread_member_node	ml_thread.c	/^ml_add_thread_member_node($/;"	f	file:
ml_add_thread_pool_node	ml_thread.c	/^ml_add_thread_pool_node($/;"	f	file:
ml_add_timer	ml_timer.c	/^ml_add_timer($/;"	f
ml_calloc_new_config	ml_handle_opt.c	/^ml_calloc_new_config($/;"	f	file:
ml_check_exit	ml_exit.c	/^ml_check_exit($/;"	f
ml_check_exit_duration	ml_exit.c	/^ml_check_exit_duration($/;"	f
ml_check_timer	ml_timer.c	/^ml_check_timer($/;"	f	file:
ml_check_timer_duration	ml_manage_listen.c	/^ml_check_timer_duration($/;"	f	file:
ml_create	ml_create.c	/^ml_create($/;"	f	file:
ml_create_client_data	ml_client_data.c	/^ml_create_client_data($/;"	f
ml_create_comm_node	ml_comm.c	/^ml_create_comm_node($/;"	f
ml_create_dispose_handle	ml_dispose.c	/^ml_create_dispose_handle($/;"	f
ml_create_exit_handle	ml_exit.c	/^ml_create_exit_handle($/;"	f
ml_create_hub	ml_hub.c	/^ml_create_hub($/;"	f
ml_create_link_handle	ml_create.c	/^ml_create_link_handle($/;"	f
ml_create_listener	ml_listen.c	/^ml_create_listener($/;"	f
ml_create_manager	ml_manage.c	/^ml_create_manager($/;"	f
ml_create_master_thread	ml_thread.c	/^ml_create_master_thread($/;"	f	file:
ml_create_member_thread	ml_thread.c	/^ml_create_member_thread($/;"	f	file:
ml_create_opt_config	ml_handle_opt.c	/^ml_create_opt_config($/;"	f
ml_create_read_config	ml_read_config.c	/^ml_create_read_config($/;"	f
ml_create_recv_check	ml_recv_check.c	/^ml_create_recv_check($/;"	f
ml_create_recv_handle	ml_recv.c	/^ml_create_recv_handle($/;"	f
ml_create_result_handle	ml_result.c	/^ml_create_result_handle($/;"	f
ml_create_send_handle	ml_send.c	/^ml_create_send_handle($/;"	f
ml_create_thread_pool	ml_thread.c	/^ml_create_thread_pool($/;"	f	file:
ml_create_thread_table	ml_thread.c	/^ml_create_thread_table($/;"	f
ml_create_thread_table_pool	ml_thread.c	/^ml_create_thread_table_pool(	$/;"	f
ml_create_timer	ml_timer.c	/^ml_create_timer($/;"	f
ml_decrease_count	ml_timer.c	/^ml_decrease_count($/;"	f	file:
ml_del_hub	ml_hub.c	/^ml_del_hub($/;"	f
ml_del_listen_sockfd	ml_listen.c	/^ml_del_listen_sockfd($/;"	f
ml_del_timer	ml_timer.c	/^ml_del_timer($/;"	f
ml_destroy_client_data	ml_client_data.c	/^ml_destroy_client_data($/;"	f
ml_destroy_comm	ml_comm.c	/^ml_destroy_comm($/;"	f
ml_destroy_comm_node	ml_comm.c	/^ml_destroy_comm_node($/;"	f
ml_destroy_exit_handle	ml_exit.c	/^ml_destroy_exit_handle($/;"	f
ml_destroy_hub	ml_hub.c	/^ml_destroy_hub($/;"	f
ml_destroy_link_handle	ml_create.c	/^ml_destroy_link_handle($/;"	f
ml_destroy_listener	ml_listen.c	/^ml_destroy_listener($/;"	f
ml_destroy_manager	ml_manage.c	/^ml_destroy_manager($/;"	f
ml_destroy_opt_config	ml_handle_opt.c	/^ml_destroy_opt_config($/;"	f
ml_destroy_read_config	ml_read_config.c	/^ml_destroy_read_config($/;"	f
ml_destroy_recv	ml_recv.c	/^ml_destroy_recv($/;"	f
ml_destroy_recv_check	ml_recv_check.c	/^ml_destroy_recv_check($/;"	f
ml_destroy_result_handle	ml_result.c	/^ml_destroy_result_handle($/;"	f
ml_destroy_send_handle	ml_send.c	/^ml_destroy_send_handle($/;"	f
ml_destroy_thread_table	ml_thread.c	/^ml_destroy_thread_table($/;"	f
ml_destroy_timer	ml_timer.c	/^ml_destroy_timer($/;"	f
ml_destroy_timer_head	ml_timer.c	/^ml_destroy_timer_head($/;"	f	file:
ml_dispatch_task	ml_listen.c	/^ml_dispatch_task($/;"	f	file:
ml_dispose_data	ml_dispose.c	/^ml_dispose_data($/;"	f	file:
ml_free_create_link_handle_node	ml_create.c	/^ml_free_create_link_handle_node($/;"	f	file:
ml_free_create_link_node	ml_create.c	/^ml_free_create_link_node($/;"	f	file:
ml_free_hub_list	ml_hub.c	/^ml_free_hub_list($/;"	f	file:
ml_free_recv_check_list	ml_recv_check.c	/^ml_free_recv_check_list($/;"	f	file:
ml_get_client_data	ml_client_data.c	/^ml_get_client_data($/;"	f
ml_get_opt_val	ml_handle_opt.c	/^ml_get_opt_val($/;"	f
ml_get_read_config_val	ml_read_config.c	/^ml_get_read_config_val($/;"	f
ml_get_thread_group_node	ml_thread.c	/^ml_get_thread_group_node($/;"	f	file:
ml_get_thread_member_node	ml_thread.c	/^ml_get_thread_member_node($/;"	f	file:
ml_get_thread_node	ml_thread.c	/^ml_get_thread_node($/;"	f	file:
ml_get_tick	ml_timer.c	/^ml_get_tick($/;"	f
ml_handle_result	ml_result.c	/^ml_handle_result($/;"	f
ml_handle_timer	ml_timer.c	/^ml_handle_timer($/;"	f	file:
ml_increase_count	ml_timer.c	/^ml_increase_count($/;"	f	file:
ml_init_thread_member	ml_thread.c	/^ml_init_thread_member($/;"	f	file:
ml_init_thread_table	ml_thread.c	/^ml_init_thread_table($/;"	f	file:
ml_mamage_del_sockfd	ml_manage_listen.c	/^ml_mamage_del_sockfd($/;"	f
ml_mamager_add_recv_node	ml_manage_recv.c	/^ml_mamager_add_recv_node($/;"	f
ml_manage_add_hub	ml_manage_hub.c	/^ml_manage_add_hub($/;"	f
ml_manage_del_hub	ml_manage_hub.c	/^ml_manage_del_hub($/;"	f
ml_manage_start	ml_manage.c	/^ml_manage_start($/;"	f
ml_manager_add_dispose_node	ml_manage_dispose.c	/^ml_manager_add_dispose_node($/;"	f
ml_manager_add_recv_check	ml_manage_recv_check.c	/^ml_manager_add_recv_check($/;"	f
ml_manager_add_sockfd	ml_manage_listen.c	/^ml_manager_add_sockfd($/;"	f
ml_manager_create_all	ml_manage.c	/^ml_manager_create_all($/;"	f
ml_manager_create_dispose	ml_manage.c	/^ml_manager_create_dispose($/;"	f
ml_manager_create_exit	ml_manage.c	/^ml_manager_create_exit($/;"	f
ml_manager_create_hub	ml_manage.c	/^ml_manager_create_hub($/;"	f
ml_manager_create_link_handle	ml_manage.c	/^ml_manager_create_link_handle($/;"	f
ml_manager_create_listener	ml_manage.c	/^ml_manager_create_listener($/;"	f
ml_manager_create_opt_config	ml_manage.c	/^ml_manager_create_opt_config($/;"	f
ml_manager_create_read_config	ml_manage.c	/^ml_manager_create_read_config($/;"	f
ml_manager_create_recv	ml_manage.c	/^ml_manager_create_recv($/;"	f
ml_manager_create_recv_check	ml_manage.c	/^ml_manager_create_recv_check($/;"	f
ml_manager_create_result	ml_manage.c	/^ml_manager_create_result($/;"	f
ml_manager_create_send	ml_manage.c	/^ml_manager_create_send($/;"	f
ml_manager_create_thread	ml_manage.c	/^ml_manager_create_thread($/;"	f
ml_manager_create_timer	ml_manage.c	/^ml_manager_create_timer($/;"	f
ml_manager_get_opt_val	ml_manage_config.c	/^ml_manager_get_opt_val($/;"	f
ml_manager_mod_sockfd	ml_manage_listen.c	/^ml_manager_mod_sockfd($/;"	f
ml_manager_read_config_val	ml_manage_config.c	/^ml_manager_read_config_val($/;"	f
ml_manager_start_create_link	ml_manage_create.c	/^ml_manager_start_create_link($/;"	f
ml_manager_start_listener	ml_manage_listen.c	/^ml_manager_start_listener($/;"	f
ml_manager_start_recv_check	ml_manage_recv_check.c	/^ml_manager_start_recv_check($/;"	f
ml_manager_stop_recv_check	ml_manage_recv_check.c	/^ml_manager_stop_recv_check($/;"	f
ml_master_thread	ml_thread.c	/^ml_master_thread($/;"	f	file:
ml_mod_listen_sockfd	ml_listen.c	/^ml_mod_listen_sockfd($/;"	f
ml_parse_opt	ml_handle_opt.c	/^ml_parse_opt($/;"	f	file:
ml_read_config	ml_read_config.c	/^ml_read_config($/;"	f	file:
ml_recv	ml_recv.c	/^ml_recv($/;"	f	file:
ml_recv_check	ml_recv_check.c	/^ml_recv_check($/;"	f	file:
ml_send	ml_send.c	/^ml_send($/;"	f	file:
ml_send_hub_list	ml_hub.c	/^ml_send_hub_list($/;"	f	file:
ml_set_hub_interval	ml_hub.c	/^ml_set_hub_interval($/;"	f	file:
ml_set_opt_config	ml_handle_opt.c	/^ml_set_opt_config($/;"	f	file:
ml_start_create_link	ml_create.c	/^ml_start_create_link($/;"	f
ml_start_create_link_thread	ml_create.c	/^ml_start_create_link_thread($/;"	f	file:
ml_start_listener	ml_listen.c	/^ml_start_listener($/;"	f
ml_start_recv_check	ml_recv_check.c	/^ml_start_recv_check($/;"	f
ml_start_timer_count	ml_timer.c	/^ml_start_timer_count($/;"	f	file:
ml_stop_recv_check	ml_recv_check.c	/^ml_stop_recv_check($/;"	f
ml_thread_handle_data	ml_thread.c	/^ml_thread_handle_data($/;"	f	file:
ml_timer_count	ml_timer.c	/^ml_timer_count($/;"	f	file:
ml_uninit_thread_group	ml_thread.c	/^ml_uninit_thread_group($/;"	f	file:
next	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
pCLFunc	ml_create.c	/^	MLCreateLinkFunc pCLFunc;$/;"	m	struct:_MLCreateLink	file:
pClientData	ml_client_data.c	/^	void *pClientData;$/;"	m	struct:_MLClientData	file:
pData	ml_timer.c	/^	void			  *pData;							\/\/管理结构$/;"	m	struct:_MLTimer	file:
pData	ml_timer.c	/^	void *pData;$/;"	m	struct:_MLTimerHead	file:
pDisposeFunc	ml_dispose.c	/^	MLDisposeFunc  pDisposeFunc;$/;"	m	struct:_MLDispose	file:
pEpollErrFunc	ml_listen.h	/^	MLEpollErrFunc   pEpollErrFunc;				\/\/错误操作$/;"	m	struct:_MLListenerOp
pEpollHupFunc	ml_listen.h	/^	MLEpollHupFunc   pEpollHupFunc;				\/\/挂起操作$/;"	m	struct:_MLListenerOp
pEpollPriFunc	ml_listen.h	/^	MLEpollPriFunc   pEpollPriFunc;				\/\/外带数据操作$/;"	m	struct:_MLListenerOp
pEpollRDHupFunc	ml_listen.h	/^	MLEpollRDHupFunc pEpollRDHupFunc;			\/\/对端关闭套接字操作$/;"	m	struct:_MLListenerOp
pFailFunc	ml_recv_check.c	/^	MLRecvCheckFailFunc pFailFunc;$/;"	m	struct:_MLRecvCheck	file:
pFunc	ml_recv_check.c	/^	void   *pFunc;$/;"	m	struct:_PCCheckNode	file:
pFunc	ml_result.c	/^	MLResultFunc pFunc;$/;"	m	struct:_MLResult	file:
pGroup	ml_thread.c	/^	void						 *pGroup;					\/\/所属的线程组$/;"	m	struct:_MLThreadMember	file:
pHubFunc	ml_hub.c	/^	MLHubFunc pHubFunc;$/;"	m	struct:_MLHub	file:
pRecvFunc	ml_recv.c	/^	MLRecvFunc pRecvFunc;$/;"	m	struct:MLRecv	file:
pSendFunc	ml_send.c	/^	MLSendFunc pSendFunc;$/;"	m	struct:_MLSend	file:
pStruCD	ml_client_data.c	/^	MLClientData *pStruCD;$/;"	m	struct:_MLDataArray	file:
pStruCH	ml_recv_check.c	/^	MLCheckHead			 *pStruCH;$/;"	m	struct:_MLRecvCheck	file:
pStruCL	ml_create.c	/^	MLCreateLink   *pStruCL;$/;"	m	struct:_MLCLHData	file:
pStruCL	ml_create.c	/^	MLCreateLink *pStruCL;$/;"	m	struct:_MLCreateLinkData	file:
pStruConfHead	ml_handle_opt.c	/^	MLCommConfig *pStruConfHead;$/;"	m	struct:_MLOptManage	file:
pStruConfHead	ml_read_config.c	/^	MLCommConfig *pStruConfHead;$/;"	m	struct:_MLRCManage	file:
pStruEV	ml_listen.c	/^	struct epoll_event *pStruEV;$/;"	m	struct:_MLListener	typeref:struct:_MLListener::epoll_event	file:
pStruHub	ml_hub.c	/^	MLHub *pStruHub;$/;"	m	struct:_MLHubListData	file:
pStruListTable	ml_hub.c	/^	MLHubTable *pStruListTable;	$/;"	m	struct:_MLHub	file:
pStruListTableMutex	ml_hub.c	/^	pthread_mutex_t *pStruListTableMutex;$/;"	m	struct:_MLHub	file:
pStruListenOper	ml_listen.c	/^	MLListenOp *pStruListenOper;$/;"	m	struct:_MLListener	file:
pStruNext	ml_comm_config.h	/^	MLCommConfig *pStruNext;$/;"	m	struct:_MLOptConfig
pStruRC	ml_recv_check.c	/^	MLRecvCheck			 *pStruRC;$/;"	m	struct:_MLCheckHead	file:
pStruTG	ml_thread.c	/^	MLThreadGroup *pStruTG;$/;"	m	struct:_MLThreadTable	file:
pStruTM	ml_thread.c	/^	MLThreadMember *pStruTM;			 											\/\/线程组成员数组$/;"	m	struct:_MLThreadGroup	file:
pStruTT	ml_thread.c	/^	void           *pStruTT;    												\/\/belonging thread table$/;"	m	struct:_MLThreadGroup	file:
pStruTimerArray	ml_timer.c	/^	MLTimerHead *pStruTimerArray;$/;"	m	struct:_MLTimer	file:
pUserData	ml_comm.h	/^	void					*pUserData;$/;"	m	struct:_MLCommNode
pUserData	ml_create.c	/^	void *pUserData;$/;"	m	struct:_MLCreateLink	file:
pUserData	ml_recv_check.c	/^	void   *pUserData;$/;"	m	struct:_PCCheckNode	file:
pUserData	ml_result.c	/^	void *pUserData;$/;"	m	struct:_MLResult	file:
pprev	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prefetch	list.h	/^static inline void prefetch(const void *x) {;}$/;"	f
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
sFile	ml_read_config.c	/^	char *sFile;$/;"	m	struct:_MLRCManage	file:
sFmt	ml_handle_opt.c	/^	char *sFmt;$/;"	m	struct:_MLOptManage	file:
sName	ml_comm_config.h	/^	char *sName;$/;"	m	struct:_MLOptConfig
sRecvData	ml_comm.h	/^	char					*sRecvData;$/;"	m	struct:_MLCommNode
sResultName	ml_result.c	/^	char sResultName[256];$/;"	m	struct:_MLResult	file:
sToken	ml_create.c	/^	char sToken[256];$/;"	m	struct:_PCLinkHandleData	file:
sUserID	ml_create.c	/^	char sUserID[64];$/;"	m	struct:_PCLinkHandleData	file:
sVal	ml_comm_config.h	/^	char *sVal;$/;"	m	struct:_MLOptConfig
ssArgv	ml_handle_opt.c	/^	char **ssArgv;$/;"	m	struct:_MLOptManage	file:
struAddr	ml_create.c	/^	struct in_addr struAddr; \/\/unsigned int uiIP;$/;"	m	struct:_MLCLHData	typeref:struct:_MLCLHData::in_addr	file:
struCLHandle	ml_manage.h	/^	MLCLHandle     struCLHandle;				\/\/create link $/;"	m	struct:_ServerTest
struCLMutex	ml_create.c	/^	pthread_mutex_t struCLMutex;$/;"	m	struct:_MLCreateLink	file:
struCheckList	ml_recv_check.c	/^	struct list_head struCheckList;	$/;"	m	struct:_MLCheckHead	typeref:struct:_MLCheckHead::list_head	file:
struCheckListMutex	ml_recv_check.c	/^	pthread_mutex_t  struCheckListMutex;$/;"	m	struct:_MLCheckHead	file:
struCntMutex	ml_timer.c	/^	pthread_mutex_t struCntMutex;$/;"	m	struct:_MLTimer	file:
struCondAttr	ml_thread.c	/^	pthread_condattr_t struCondAttr;$/;"	m	struct:_MLThreadTable	file:
struDisposeHandle	ml_manage.h	/^	MLDisposeHandle struDisposeHandle;$/;"	m	struct:_ServerTest
struDisposeHandle	ml_recv.c	/^	MLDisposeHandle struDisposeHandle;$/;"	m	struct:MLRecv	file:
struExitHandle	ml_create.c	/^	MLExitHandle   struExitHandle;$/;"	m	struct:_MLCreateLink	file:
struExitHandle	ml_manage.h	/^	MLExitHandle   struExitHandle;$/;"	m	struct:_ServerTest
struExitHandle	ml_thread.c	/^	MLExitHandle  struExitHandle;$/;"	m	struct:_MLThreadTable	file:
struExitHandle	ml_timer.c	/^	MLExitHandle struExitHandle;$/;"	m	struct:_MLTimer	file:
struExitMutex	ml_exit.c	/^	pthread_mutex_t struExitMutex;$/;"	m	struct:_MLExit	file:
struGroupCond	ml_thread.c	/^	pthread_cond_t  struGroupCond;									  	\/\/组控制线程条件变量$/;"	m	struct:_MLThreadGroup	file:
struGroupHead	ml_thread.c	/^	struct list_head struGroupHead;											\/\/组链表$/;"	m	struct:_MLThreadGroup	typeref:struct:_MLThreadGroup::list_head	file:
struGroupMutex	ml_thread.c	/^	pthread_mutex_t struGroupMutex;											\/\/组控制线程锁$/;"	m	struct:_MLThreadGroup	file:
struHead	ml_hub.c	/^	struct list_head struHead;$/;"	m	struct:MLHubTable	typeref:struct:MLHubTable::list_head	file:
struHead	ml_hub.c	/^	struct list_head struHead;$/;"	m	struct:_MLHubListData	typeref:struct:_MLHubListData::list_head	file:
struHubHandle	ml_manage.h	/^	MLHubHandle    struHubHandle;				\/\/hub config$/;"	m	struct:_ServerTest
struListenHandle	ml_manage.h	/^	MLListenHandle struListenHandle;		\/\/套接字监e听$/;"	m	struct:_ServerTest
struMaxIntervalMutex	ml_hub.c	/^	pthread_mutex_t struMaxIntervalMutex;$/;"	m	struct:_MLHub	file:
struMutex	ml_recv_check.c	/^	pthread_mutex_t struMutex;$/;"	m	struct:_PCCheckNode	file:
struMutex	ml_timer.c	/^	pthread_mutex_t struMutex;$/;"	m	struct:_MLTimerHead	file:
struNode	ml_comm.h	/^	struct list_head struNode;$/;"	m	struct:_MLCommNode	typeref:struct:_MLCommNode::list_head
struNode	ml_create.c	/^	struct list_head struNode;$/;"	m	struct:_MLCLHData	typeref:struct:_MLCLHData::list_head	file:
struNode	ml_create.c	/^	struct list_head struNode;$/;"	m	struct:_MLCreateLinkData	typeref:struct:_MLCreateLinkData::list_head	file:
struNode	ml_hub.c	/^	struct list_head struNode;$/;"	m	struct:_MLHubListData	typeref:struct:_MLHubListData::list_head	file:
struNode	ml_recv_check.c	/^	struct list_head struNode;$/;"	m	struct:_PCCheckNode	typeref:struct:_PCCheckNode::list_head	file:
struNode	ml_thread.c	/^	struct list_head struNode;				\/\/加入组链表$/;"	m	struct:_MLThreadMember	typeref:struct:_MLThreadMember::list_head	file:
struOptHandle	ml_manage.h	/^	MLOptHandle    struOptHandle;       \/\/选项配置$/;"	m	struct:_ServerTest
struParam	ml_create.c	/^	MLCLParam			 struParam;$/;"	m	struct:_MLCreateLink	file:
struRCHandle	ml_manage.h	/^	MLRCHandle		 struRCHandle;				\/\/config配置$/;"	m	struct:_ServerTest
struRecvCheckHandle	ml_manage.h	/^	MLRecvCheckHandle struRecvCheckHandle; \/\/接收超时检测$/;"	m	struct:_ServerTest
struRecvHandle	ml_listen.c	/^	MLRecvHandle struRecvHandle;$/;"	m	struct:_MLListener	file:
struRecvHandle	ml_manage.h	/^	MLRecvHandle   struRecvHandle;			\/\/recv$/;"	m	struct:_ServerTest
struResultHandle	ml_manage.h	/^	MLResultHandle struResultHandle;$/;"	m	struct:_ServerTest
struSaveMutex	ml_recv_check.c	/^	pthread_mutex_t  struSaveMutex;$/;"	m	struct:_MLRecvCheck	file:
struSendHandle	ml_listen.c	/^	MLSendHandle struSendHandle;$/;"	m	struct:_MLListener	file:
struSendHandle	ml_manage.h	/^	MLSendHandle   struSendHandle;$/;"	m	struct:_ServerTest
struStartAddr	ml_create.h	/^	struct in_addr struStartAddr; \/\/The starting addr$/;"	m	struct:_MLCLParam	typeref:struct:_MLCLParam::in_addr
struTS	ml_recv_check.c	/^	struct timespec  struTS;					\/\/记录时间$/;"	m	struct:_MLRecvCheck	typeref:struct:_MLRecvCheck::timespec	file:
struTS	ml_recv_check.c	/^	struct timespec struTS;$/;"	m	struct:_PCCheckNode	typeref:struct:_PCCheckNode::timespec	file:
struThreadCond	ml_thread.c	/^	pthread_cond_t   struThreadCond;  \/\/每个链表的条件变量$/;"	m	struct:_MLThreadMember	file:
struThreadHandle	ml_create.c	/^	MLThreadHandle struThreadHandle;$/;"	m	struct:_MLCreateLink	file:
struThreadHandle	ml_dispose.c	/^	MLThreadHandle struThreadHandle;$/;"	m	struct:_MLDispose	file:
struThreadHandle	ml_hub.c	/^	MLThreadHandle struThreadHandle;$/;"	m	struct:_MLHub	file:
struThreadHandle	ml_manage.h	/^	MLThreadHandle struThreadHandle;		\/\/线程组表$/;"	m	struct:_ServerTest
struThreadHandle	ml_recv.c	/^	MLThreadHandle struThreadHandle;$/;"	m	struct:MLRecv	file:
struThreadHandle	ml_send.c	/^	MLThreadHandle struThreadHandle;$/;"	m	struct:_MLSend	file:
struThreadList	ml_thread.c	/^	struct list_head struThreadList;  \/\/链表数组$/;"	m	struct:_MLThreadMember	typeref:struct:_MLThreadMember::list_head	file:
struThreadMutex	ml_thread.c	/^	pthread_mutex_t  struThreadMutex; \/\/每个链表的锁$/;"	m	struct:_MLThreadMember	file:
struTickMutex	ml_timer.c	/^	pthread_mutex_t struTickMutex;$/;"	m	struct:_MLTimer	file:
struTimerHandle	ml_hub.c	/^	MLTimerHandle struTimerHandle;$/;"	m	struct:_MLHub	file:
struTimerHandle	ml_manage.h	/^	MLTimerHandle  struTimerHandle;			\/\/定时器$/;"	m	struct:_ServerTest
struTimerHandle	ml_recv_check.c	/^	MLTimerHandle    struTimerHandle;$/;"	m	struct:_MLRecvCheck	file:
uiCount	ml_hub.c	/^	unsigned int uiCount;$/;"	m	struct:_MLHub	file:
uiDurationTime	ml_manage.h	/^	unsigned int   uiDurationTime;			\/\/测试持续时间$/;"	m	struct:_ServerTest
uiHubIntervalOffset	ml_hub.c	/^	unsigned int uiHubIntervalOffset;$/;"	m	struct:_MLHub	file:
uiHubIntervalTime	ml_hub.c	/^	unsigned int uiHubIntervalTime;$/;"	m	struct:_MLHub	file:
uiMaxInterval	ml_hub.c	/^	unsigned int uiMaxInterval;$/;"	m	struct:_MLHub	file:
uiMinInterval	ml_hub.c	/^	unsigned int uiMinInterval;$/;"	m	struct:_MLHub	file:
uiOffset	ml_hub.c	/^	unsigned int uiOffset;$/;"	m	struct:_MLHub	file:
uiTimes	ml_hub.c	/^	unsigned int uiTimes;$/;"	m	struct:_MLHub	file:
ulData	ml_comm.h	/^	unsigned long ulData;$/;"	m	struct:_MLCommNode
ulData	ml_timer.c	/^	unsigned long ulData; \/\/私有数据$/;"	m	struct:_MLTimerHead	file:
usEndPort	ml_create.h	/^	unsigned short usEndPort;		\/\/The End port$/;"	m	struct:_MLCLParam
usPort	ml_create.c	/^	unsigned short usPort;$/;"	m	struct:_MLCLHData	file:
usStartPort	ml_create.h	/^	unsigned short usStartPort; \/\/The starting port$/;"	m	struct:_MLCLParam
